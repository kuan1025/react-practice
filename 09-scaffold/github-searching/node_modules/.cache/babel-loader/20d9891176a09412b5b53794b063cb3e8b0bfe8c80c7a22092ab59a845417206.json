{"ast":null,"code":"var _jsxFileName = \"/Users/Damian/side-project/react-practice/09-scaffold/github-searching/src/component/Search/index.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Search extends Component {\n  constructor(...args) {\n    super(...args);\n    this.searchByUsername = async () => {\n      //continuesly destructuring assignment and rename!!\n      const {\n        keywordElement: {\n          value: keyword\n        }\n      } = this;\n      this.props.updateSearchingStatus({\n        firstLoading: false,\n        isLoading: true\n      });\n      this.props.updateSearchingStatus({\n        isLoading: true\n      });\n      // request\n      // axios.get(`/api1/search/users?q=${keyword}`).then(\n      //     response => {\n      //         this.props.updateSearchingStatus(\n      //             {\n      //                 isLoading: false,\n      //                 users: response.data.items\n      //             })\n\n      //     },\n      //     error => { \n      //         console.log('Fail to request data ', error) ;\n      //         this.props.updateSearchingStatus({ isLoading: false, errorMsg : error.message });\n      //     }\n      // )\n\n      // fetch ()\n      // fetch(`/api1/search/users?q=${keyword}`).then(\n      //     response =>{\n      //         console.log('connect success')\n      //         return response.json();\n      //     },\n      //     error =>{\n      //         console.log('connect fail')\n      //         console.log(error)\n      //         return new Promise(()=>{})\n      //     }\n      // ).then(\n      //     response =>{\n      //         console.log('successfully receive data', response)\n      //     },\n      //     error =>{\n      //         console.log('fail to receive data',error)\n      //     }\n      // ) \n\n      // fetch  optimization 1\n      // fetch(`/api1/search/users?q=${keyword}`).then(\n      //     response =>{\n      //         console.log('connect success')\n      //         return response.json();\n      //     }\n      // ).then(\n      //     response =>{\n      //         console.log('successfully receive data', response)\n      //     }\n      // ).catch(\n      //     error =>{console.log('error', error)}\n      // ) \n\n      // fetch optimization 2\n      try {\n        const reponse = await fetch(`/api1/search/users?q=${keyword}`);\n        const data = await reponse.json();\n        console.log(data);\n        this.props.updateSearchingStatus({\n          isLoading: false,\n          users: data.items\n        });\n      } catch (error) {\n        console.log();\n        this.props.updateSearchingStatus({\n          isLoading: false,\n          errorMsg: error.message\n        });\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"jumbotron\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"jumbotron-heading\",\n        children: \"search github users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: node => this.keywordElement = node,\n          placeholder: \"input key word and click searching\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.searchByUsername,\n          children: \"search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","axios","jsxDEV","_jsxDEV","Search","constructor","args","searchByUsername","keywordElement","value","keyword","props","updateSearchingStatus","firstLoading","isLoading","reponse","fetch","data","json","console","log","users","items","error","errorMsg","message","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","node","placeholder","onClick"],"sources":["/Users/Damian/side-project/react-practice/09-scaffold/github-searching/src/component/Search/index.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\n\nexport default class Search extends Component {\n\n\n    searchByUsername = async () => {\n        //continuesly destructuring assignment and rename!!\n        const { keywordElement: { value: keyword } } = this;\n        this.props.updateSearchingStatus({ firstLoading: false, isLoading: true });\n        this.props.updateSearchingStatus(\n            {\n                isLoading: true\n            })\n        // request\n        // axios.get(`/api1/search/users?q=${keyword}`).then(\n        //     response => {\n        //         this.props.updateSearchingStatus(\n        //             {\n        //                 isLoading: false,\n        //                 users: response.data.items\n        //             })\n\n        //     },\n        //     error => { \n        //         console.log('Fail to request data ', error) ;\n        //         this.props.updateSearchingStatus({ isLoading: false, errorMsg : error.message });\n        //     }\n        // )\n\n        // fetch ()\n        // fetch(`/api1/search/users?q=${keyword}`).then(\n        //     response =>{\n        //         console.log('connect success')\n        //         return response.json();\n        //     },\n        //     error =>{\n        //         console.log('connect fail')\n        //         console.log(error)\n        //         return new Promise(()=>{})\n        //     }\n        // ).then(\n        //     response =>{\n        //         console.log('successfully receive data', response)\n        //     },\n        //     error =>{\n        //         console.log('fail to receive data',error)\n        //     }\n        // ) \n\n\n        // fetch  optimization 1\n        // fetch(`/api1/search/users?q=${keyword}`).then(\n        //     response =>{\n        //         console.log('connect success')\n        //         return response.json();\n        //     }\n        // ).then(\n        //     response =>{\n        //         console.log('successfully receive data', response)\n        //     }\n        // ).catch(\n        //     error =>{console.log('error', error)}\n        // ) \n\n        // fetch optimization 2\n        try {\n            const reponse = await fetch(`/api1/search/users?q=${keyword}`);\n            const data = await reponse.json();\n            console.log(data)\n            this.props.updateSearchingStatus({ isLoading: false, users: data.items })\n        } catch (error) {\n            console.log();\n            this.props.updateSearchingStatus({ isLoading: false, errorMsg : error.message })\n        }\n\n    }\n\n    render() {\n        return (\n            <section className=\"jumbotron\">\n                <h3 className=\"jumbotron-heading\">search github users</h3>\n                <div>\n\n                    <input type=\"text\" ref={node => this.keywordElement = node} placeholder=\"input key word and click searching\" />&nbsp;\n                    <button onClick={this.searchByUsername}>search</button>\n                </div>\n            </section>\n        )\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzB,eAAe,MAAMC,MAAM,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAG1CC,gBAAgB,GAAG,YAAY;MAC3B;MACA,MAAM;QAAEC,cAAc,EAAE;UAAEC,KAAK,EAAEC;QAAQ;MAAE,CAAC,GAAG,IAAI;MACnD,IAAI,CAACC,KAAK,CAACC,qBAAqB,CAAC;QAAEC,YAAY,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAK,CAAC,CAAC;MAC1E,IAAI,CAACH,KAAK,CAACC,qBAAqB,CAC5B;QACIE,SAAS,EAAE;MACf,CAAC,CAAC;MACN;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAGA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA,IAAI;QACA,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAAC,wBAAwBN,OAAO,EAAE,CAAC;QAC9D,MAAMO,IAAI,GAAG,MAAMF,OAAO,CAACG,IAAI,CAAC,CAAC;QACjCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjB,IAAI,CAACN,KAAK,CAACC,qBAAqB,CAAC;UAAEE,SAAS,EAAE,KAAK;UAAEO,KAAK,EAAEJ,IAAI,CAACK;QAAM,CAAC,CAAC;MAC7E,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZJ,OAAO,CAACC,GAAG,CAAC,CAAC;QACb,IAAI,CAACT,KAAK,CAACC,qBAAqB,CAAC;UAAEE,SAAS,EAAE,KAAK;UAAEU,QAAQ,EAAGD,KAAK,CAACE;QAAQ,CAAC,CAAC;MACpF;IAEJ,CAAC;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACL,oBACIvB,OAAA;MAASwB,SAAS,EAAC,WAAW;MAAAC,QAAA,gBAC1BzB,OAAA;QAAIwB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1D7B,OAAA;QAAAyB,QAAA,gBAEIzB,OAAA;UAAO8B,IAAI,EAAC,MAAM;UAACC,GAAG,EAAEC,IAAI,IAAI,IAAI,CAAC3B,cAAc,GAAG2B,IAAK;UAACC,WAAW,EAAC;QAAoC;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,QAC/G,eAAA7B,OAAA;UAAQkC,OAAO,EAAE,IAAI,CAAC9B,gBAAiB;UAAAqB,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAElB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}